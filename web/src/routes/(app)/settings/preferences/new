<script lang="ts">
	import { onMount } from 'svelte';
	import { superForm } from 'sveltekit-superforms/client';
	import { zodClient } from 'sveltekit-superforms/adapters';
	import * as Form from '$lib/components/ui/form/index.js';
	import { Input } from '$lib/components/ui/input/index.js';
	import { Button } from '$lib/components/ui/button/index.js';
	import { Save } from 'lucide-svelte';
	import { preferencesSchema } from '../schema';
	import { api } from '$lib/api/api';

	import { RadioGroup, RadioGroupItem } from '$lib/components/ui/radio-group'; // shadcn-svelte version
	import { Label } from '$lib/components/ui/label/index.js';
	import * as Select from '$lib/components/ui/select/index.js';
	import { motion } from 'framer-motion';

	let loading = true;
	let successMessage = '';

	const preferences = superForm(
		{
			theme: 'light',
			notifications: {
				email_alerts: false,
				push_alerts: false,
				alert_frequency: 'immediate'
			},
			dashboard: {
				refresh_interval: 30,
				default_time_range: '1h',
				show_system_metrics: true
			}
		},
		{
			validators: zodClient(preferencesSchema),
			dataType: 'json'
			// No onUpdated! Only submit
		}
	);

	const { form, enhance, submitting } = preferences;
	$: formData = $form;

	// Helper for time range
	function getTimeRangeLabel(value: string): string {
		const labels: Record<string, string> = {
			'15m': '15 Minutes',
			'1h': '1 Hour',
			'6h': '6 Hours',
			'24h': '24 Hours',
			'7d': '7 Days'
		};
		return labels[value] || 'Select time range';
	}

	// Load preferences on mount
	onMount(async () => {
		try {
			const userPreferences = await api.getUserPreferences();
			if (userPreferences) {
				form.set({
					theme: userPreferences.theme || 'light',
					notifications: {
						email_alerts: userPreferences.notifications?.email_alerts ?? false,
						push_alerts: userPreferences.notifications?.push_alerts ?? false,
						alert_frequency: userPreferences.notifications?.alert_frequency || 'immediate'
					},
					dashboard: {
						refresh_interval: userPreferences.dashboard?.refresh_interval ?? 30,
						default_time_range: userPreferences.dashboard?.default_time_range || '1h',
						show_system_metrics: userPreferences.dashboard?.show_system_metrics ?? true
					}
				});
			}
		} catch (error) {
			console.error('Failed to load preferences:', error);
		} finally {
			loading = false;
		}
	});

	// Save on submit
	async function handleSubmit(event: Event) {
		event.preventDefault();
		if (form.valid) {
			try {
				const result = await api.updateUserPreferences(form.data);
				if (result.success) {
					successMessage = 'Preferences updated successfully!';
					setTimeout(() => (successMessage = ''), 3000);
				}
			} catch (error) {
				console.error('Failed to update preferences:', error);
			}
		}
	}
</script>

<svelte:head>
	<title>Preferences</title>
</svelte:head>

{#if loading}
	<div class="flex items-center justify-center p-8">
		<div class="h-8 w-8 animate-spin rounded-full border-b-2 border-gray-900"></div>
	</div>
{:else}
	<div class="space-y-6">
		<div>
			<h3 class="text-lg font-medium">Preferences</h3>
			<p class="text-muted-foreground text-sm">
				Configure your application preferences and notifications.
			</p>
		</div>

		{#if successMessage}
			<div class="rounded-md bg-green-50 p-4">
				<p class="text-sm font-medium text-green-800">{successMessage}</p>
			</div>
		{/if}

		<div>
			<div class="py-5 sm:p-6">
				<form use:enhance on:submit={handleSubmit} class="space-y-8">
					<!-- THEME SELECTION -->
					<Form.Fieldset {form} name="theme">
						<Form.Legend>Theme</Form.Legend>
						<Form.Description>Select the dashboard theme.</Form.Description>
						<Form.FieldErrors />

						<RadioGroup
							class="grid max-w-xl grid-cols-3 gap-6 pt-4"
							bind:value={formData.theme}
							name="theme"
						>
							{#each ['light', 'dark', 'system'] as theme}
								<RadioGroupItem value={theme} id={"theme-" + theme} class="sr-only" />
								<motion.div
									layout
									transition={{ type: 'spring', stiffness: 200, damping: 18 }}
									class="group relative cursor-pointer"
									animate={{
										scale: formData.theme === theme ? 1.04 : 1,
										boxShadow: formData.theme === theme ? '0 0 0 2px #2563eb' : 'none'
									}}
									on:click={() => (formData.theme = theme)}
								>
									<label for={"theme-" + theme}>
										<div
											class="border transition-all duration-200 ease-in-out rounded-lg p-2 flex flex-col items-center gap-2 
												{formData.theme === theme
													? 'border-blue-500 ring-2 ring-blue-400'
													: 'border-gray-200 dark:border-gray-700'}
												bg-white dark:bg-gray-800 shadow-sm"
										>
											<!-- ICON PREVIEW -->
											{#if theme === 'light'}
												<div class="w-10 h-10 rounded-full bg-gradient-to-br from-gray-200 to-white flex items-center justify-center">
													<svg class="w-6 h-6 text-yellow-400" fill="none" stroke="currentColor" stroke-width="2" viewBox="0 0 24 24">
														<circle cx="12" cy="12" r="5" />
														<path d="M12 1v2m0 18v2m11-11h-2M3 12H1m16.95-6.95l-1.41 1.41M6.34 17.66l-1.41 1.41m12.02 0l-1.41-1.41M6.34 6.34L4.93 4.93" />
													</svg>
												</div>
											{:else if theme === 'dark'}
												<div class="w-10 h-10 rounded-full bg-gradient-to-br from-gray-900 to-gray-700 flex items-center justify-center">
													<svg class="w-6 h-6 text-gray-200" fill="none" stroke="currentColor" stroke-width="2" viewBox="0 0 24 24">
														<path d="M21 12.79A9 9 0 1111.21 3 7 7 0 0021 12.79z" />
													</svg>
												</div>
											{:else}
												<div class="w-10 h-10 rounded-full bg-gradient-to-br from-gray-200 to-gray-900 flex items-center justify-center">
													<svg class="w-6 h-6 text-blue-400" fill="none" stroke="currentColor" stroke-width="2" viewBox="0 0 24 24">
														<path d="M6 12a6 6 0 0112 0M6 12a6 6 0 0012 0" />
													</svg>
												</div>
											{/if}
											<span class="block text-sm font-medium capitalize mt-1">
												{theme}
											</span>
											{#if formData.theme === theme}
												<span class="absolute top-2 right-2 text-blue-600">
													<svg class="w-5 h-5" fill="currentColor" viewBox="0 0 20 20"><path fill-rule="evenodd" d="M16.707 6.293a1 1 0 010 1.414l-7.071 7.07a1 1 0 01-1.415 0l-3.536-3.536a1 1 0 111.415-1.414l2.828 2.828 6.364-6.364a1 1 0 011.415 0z" clip-rule="evenodd" /></svg>
												</span>
											{/if}
										</div>
									</label>
								</motion.div>
							{/each}
						</RadioGroup>
					</Form.Fieldset>

					<!-- NOTIFICATIONS -->
					<div class="space-y-4">
						<h4 class="">Notifications</h4>
						<div class="flex gap-6">
							<Form.Field form={preferences} name="notifications.email_alerts">
								<Form.Control>
									{#snippet children({ props })} 
										<div class="flex items-center space-x-2">
											<input
												{...props}
												type="checkbox"
												bind:checked={formData.notifications.email_alerts}
												class="h-4 w-4 rounded border-gray-300"
											/>
											<Form.Label class="text-sm font-normal">Email alerts</Form.Label>
										</div>
									{/snippet}
								</Form.Control>
								<Form.FieldErrors />
							</Form.Field>
							<Form.Field form={preferences} name="notifications.push_alerts">
								<Form.Control>
									{#snippet children({ props })} 
										<div class="flex items-center space-x-2">
											<input
												{...props}
												type="checkbox"
												bind:checked={formData.notifications.push_alerts}
												class="h-4 w-4 rounded border-gray-300"
											/>
											<Form.Label class="text-sm font-normal">Push notifications</Form.Label>
										</div>
									{/snippet}
								</Form.Control>
								<Form.FieldErrors />
							</Form.Field>
						</div>
						<!-- Alert Frequency -->
						<Form.Field form={preferences} name="notifications.alert_frequency">
							<Form.Control>
								<div class="flex gap-4">
									{#each ['immediate', 'hourly', 'daily'] as freq}
										<label class="flex items-center gap-2 cursor-pointer">
											<input
												type="radio"
												value={freq}
												name="alert_frequency"
												bind:group={formData.notifications.alert_frequency}
												class="accent-blue-600"
											/>
											<span class="capitalize text-sm">{freq}</span>
										</label>
									{/each}
								</div>
							</Form.Control>
							<Form.Description>How often to receive alerts.</Form.Description>
							<Form.FieldErrors />
						</Form.Field>
					</div>

					<!-- DASHBOARD -->
					<div class="space-y-4">
						<h4 class="text-sm font-medium">Dashboard</h4>
						<Form.Field form={preferences} name="dashboard.refresh_interval">
							<Form.Control>
								{#snippet children({ props })} 
									<Form.Label>Refresh Interval (seconds)</Form.Label>
									<Input
										{...props}
										type="number"
										min="10"
										max="300"
										bind:value={formData.dashboard.refresh_interval}
										placeholder="30"
									/>
								{/snippet}
							</Form.Control>
							<Form.Description>
								How often to refresh dashboard data (10-300 seconds).
							</Form.Description>
							<Form.FieldErrors />
						</Form.Field>
						<Form.Field form={preferences} name="dashboard.default_time_range">
							<Form.Control>
								{#snippet children({ props })} 
									<Form.Label>Default Time Range</Form.Label>
									<Select.Root
										type="single"
										value={formData.dashboard.default_time_range}
										onValueChange={(value: string) => {
											if (value) {
												form.update((data) => ({
													...data,
													dashboard: {
														...data.dashboard,
														default_time_range: value
													}
												}));
											}
										}}
									>
										<Select.Trigger {...props} class="w-full">
											{getTimeRangeLabel(formData.dashboard.default_time_range)}
										</Select.Trigger>
										<Select.Content>
											<Select.Item value="15m" label="15 Minutes" />
											<Select.Item value="1h" label="1 Hour" />
											<Select.Item value="6h" label="6 Hours" />
											<Select.Item value="24h" label="24 Hours" />
											<Select.Item value="7d" label="7 Days" />
										</Select.Content>
									</Select.Root>
								{/snippet}
							</Form.Control>
							<Form.FieldErrors />
						</Form.Field>
						<Form.Field form={preferences} name="dashboard.show_system_metrics">
							<Form.Control>
								{#snippet children({ props })} 
									<div class="flex items-center space-x-2">
										<input
											{...props}
											type="checkbox"
											bind:checked={formData.dashboard.show_system_metrics}
											class="h-4 w-4 rounded border-gray-300"
										/>
										<Form.Label class="text-sm font-normal">Show system metrics</Form.Label>
									</div>
								{/snippet}
							</Form.Control>
							<Form.FieldErrors />
						</Form.Field>
					</div>

					<div class="flex justify-end">
						<Button type="submit" disabled={$submitting}>
							{#if $submitting}
								<div class="mr-2 h-4 w-4 animate-spin rounded-full border-b-2 border-white"></div>
							{:else}
								<Save class="mr-2 h-4 w-4" />
							{/if}
							Save Preferences
						</Button>
					</div>
				</form>
			</div>
		</div>
	</div>
{/if}
